import { Recipe, Ingredient } from '@/types/recipe';

export interface ShoppingListItem {
  item: string;
  quantities: string[];
  recipes: string[];
  checked: boolean;
}

export class ShoppingListService {
  /**
   * Generate a shopping list from multiple recipes
   * Combines similar ingredients and tracks which recipes they're from
   */
  static generateShoppingList(recipes: Recipe[]): ShoppingListItem[] {
    const itemMap = new Map<string, ShoppingListItem>();

    recipes.forEach(recipe => {
      recipe.ingredients.forEach((ingredient: Ingredient) => {
        const itemKey = ingredient.item.toLowerCase().trim();
        
        if (itemMap.has(itemKey)) {
          const existingItem = itemMap.get(itemKey)!;
          existingItem.quantities.push(ingredient.quantity);
          existingItem.recipes.push(recipe.title);
        } else {
          itemMap.set(itemKey, {
            item: ingredient.item,
            quantities: [ingredient.quantity],
            recipes: [recipe.title],
            checked: false
          });
        }
      });
    });

    // Convert map to array and sort alphabetically
    return Array.from(itemMap.values())
      .sort((a, b) => a.item.localeCompare(b.item));
  }

  /**
   * Generate a shopping list from recipes in a board
   */
  static async generateShoppingListFromBoard(boardId: string): Promise<ShoppingListItem[]> {
    // This would typically fetch recipes from the board
    // For now, we'll return an empty array as placeholder
    return [];
  }

  /**
   * Format shopping list for sharing (as text)
   */
  static formatForSharing(shoppingList: ShoppingListItem[]): string {
    let output = "🛒 Shopping List\n\n";
    
    shoppingList.forEach((item, index) => {
      const checkbox = item.checked ? "✅" : "☐";
      const quantities = item.quantities.join(", ");
      const recipes = item.recipes.length > 1 
        ? ` (for ${item.recipes.length} recipes)`
        : ` (${item.recipes[0]})`;
      
      output += `${checkbox} ${item.item} - ${quantities}${recipes}\n`;
    });

    output += `\n📱 Generated by Tastify`;
    return output;
  }
}
